{"version":3,"sources":["redux/types.js","redux/actions.js","components/spinner/spinner.styles.js","components/spinner/spinner.component.jsx","components/error-boundary/error-boundary.styles.js","components/error-boundary/error-boundary.component.jsx","Styles/GlobalStyles.jsx","components/ToggleButton/ToggleButton.jsx","App.js","redux/root-reducer.js","redux/store.js","serviceWorker.js","index.js"],"names":["actionTypes","GET_CONTACTS_SUCCESS","GET_CONTACTS_PENDING","GET_CONTACTS_FAILED","UPDATE_PAGE_NUMBER","SEARCH_FIELD_CHANGE","UPDATE_PERSON_DETAIL","TOGGLE_DARK_MODE","fetchContactList","page","url","dispatch","type","Axios","get","then","response","payload","data","catch","error","updatePageNumber","searchFieldChange","updatePersonDetailView","person","toggleDarkMode","SpinnerOverlay","styled","div","SpinnerContainer","Spinner","ErrorImageOverlay","ErrorImageContainer","imageUrl","ErrorImageText","h2","ErrorBoundary","state","hasErrored","info","console","log","this","props","children","React","Component","GlobalStyles","createGlobalStyle","theme","mode","connect","toggleColorMode","className","onClick","ContactDetails","lazy","AddressBook","globalMode","styleReducer","fallback","style","position","top","exact","path","component","initialContactList","contactList","isPending","searchField","initialPersonDetail","initialStyle","rootReducer","combineReducers","contactListReducer","action","results","personDetailReducer","middlewares","createLogger","thunkMiddleware","store","createStore","applyMiddleware","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.ae0b30c7.chunk.js","sourcesContent":["export const actionTypes = {\n  GET_CONTACTS_SUCCESS: \"GET_CONTACTS_SUCCESS\",\n  GET_CONTACTS_PENDING: \"GET_CONTACTS_PENDING\",\n  GET_CONTACTS_FAILED: \"GET_CONTACTS_FAILED\",\n  UPDATE_PAGE_NUMBER: \"UPDATE_PAGE_NUMBER\",\n  SEARCH_FIELD_CHANGE: \"SEARCH_FIELD_CHANGE\",\n  UPDATE_PERSON_DETAIL: \"UPDATE_PERSON_DETAIL\",\n  TOGGLE_DARK_MODE: \"TOGGLE_DARK_MODE\",\n};\n","import { actionTypes } from \"./types\";\nimport Axios from \"axios\";\n/**\n * Does asynchronous with help of redux thunk middleware.\n */\nexport const fetchContactList = (page = 1) => {\n  let url = `https://randomuser.me/api/?${page}&results=50`;\n\n  return function (dispatch) {\n    dispatch({\n      type: actionTypes.GET_CONTACTS_PENDING,\n    });\n    Axios.get(url)\n      .then((response) =>\n        dispatch({\n          type: actionTypes.GET_CONTACTS_SUCCESS,\n          payload: response.data,\n        })\n      )\n      .catch((response) =>\n        dispatch({\n          type: actionTypes.GET_CONTACTS_FAILED,\n          payload: response.error,\n        })\n      );\n  };\n};\n\nexport const updatePageNumber = (page) => ({\n  type: actionTypes.UPDATE_PAGE_NUMBER,\n  payload: page,\n});\n\nexport const searchFieldChange = (data) => ({\n  type: actionTypes.SEARCH_FIELD_CHANGE,\n  payload: data,\n});\n\nexport const updatePersonDetailView = (person) => ({\n  type: actionTypes.UPDATE_PERSON_DETAIL,\n  payload: person,\n});\n\nexport const toggleDarkMode = () => ({\n  type: actionTypes.TOGGLE_DARK_MODE,\n});\n","import styled from \"styled-components\";\n\nexport const SpinnerOverlay = styled.div`\n  height: 60vh;\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const SpinnerContainer = styled.div`\n  display: inline-block;\n  width: 50px;\n  height: 50px;\n  border: 3px solid rgba(195, 195, 195, 0.6);\n  border-radius: 50%;\n  border-top-color: #636767;\n  animation: spin 1s ease-in-out infinite;\n  -webkit-animation: spin 1s ease-in-out infinite;\n  @keyframes spin {\n    to {\n      -webkit-transform: rotate(360deg);\n    }\n  }\n  @-webkit-keyframes spin {\n    to {\n      -webkit-transform: rotate(360deg);\n    }\n  }\n`;\n","import React from \"react\";\nimport { SpinnerContainer, SpinnerOverlay } from \"./spinner.styles\";\n/**\n * fall back component when the component is loading\n */\nconst Spinner = () => (\n  <SpinnerOverlay>\n    <SpinnerContainer />\n  </SpinnerOverlay>\n);\n\nexport default Spinner;\n","import styled from \"styled-components\";\n\nexport const ErrorImageOverlay = styled.div`\n  height: 60vh;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const ErrorImageContainer = styled.div`\n  display: inline-block;\n  background-image: ${({ imageUrl }) => `url(${imageUrl})`};\n  background-size: cover;\n  background-position: center;\n  width: 40vh;\n  height: 40vh;\n`;\n\nexport const ErrorImageText = styled.h2`\n  font-size: 28px;\n  color: #2f8e89;\n`;\n","import React from \"react\";\nimport {\n  ErrorImageContainer,\n  ErrorImageOverlay,\n  ErrorImageText,\n} from \"./error-boundary.styles\";\n\nclass ErrorBoundary extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      hasErrored: false,\n    };\n  }\n  static getDerivedStateFromError(error) {\n    //process the error, catch the error ahead of time\n    return { hasErrored: true };\n  }\n\n  componentDidCatch(error, info) {\n    console.log(error);\n  }\n  render() {\n    if (this.state.hasErrored) {\n      return (\n        <ErrorImageOverlay>\n          {/**\n           * Representing a broken page if something happens to the application\n           *\n           */}\n          <ErrorImageContainer imageUrl=\"http://drive.google.com/uc?export=view&id=1fDIZsC7h9yRaSSlkQXwvAt-FD9suiSb2\" />\n          <ErrorImageText>Sorry the page is broken</ErrorImageText>\n        </ErrorImageOverlay>\n      );\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import { createGlobalStyle } from \"styled-components\";\nconst GlobalStyles = createGlobalStyle`\nbody{\n  background-color:${(props) =>\n    props.theme.mode === \"dark\" ? \"#111\" : \"#EEE\"};\n  color:${(props) => (props.theme.mode === \"dark\" ? \"#EEE\" : \"#111\")};\n}\n\n\n`;\n\nexport default GlobalStyles;\n","import React from \"react\";\nimport \"./ToggleButton.scss\";\nimport { connect } from \"react-redux\";\nimport { toggleDarkMode } from \"../../redux/actions\";\n\nconst ToggleButton = ({ toggleColorMode }) => {\n  const checkFun = () => {\n    toggleColorMode();\n  };\n  return (\n    <div>\n      <label className=\"switch\">\n        <input type=\"checkbox\" />\n        <span onClick={checkFun} className=\"knob\"></span>\n      </label>\n    </div>\n  );\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  toggleColorMode: () => dispatch(toggleDarkMode()),\n});\n\nexport default connect(null, mapDispatchToProps)(ToggleButton);\n","import React, { lazy, Suspense } from \"react\";\nimport { Route, Switch, BrowserRouter as Router } from \"react-router-dom\";\nimport \"./App.css\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport ErrorBoundary from \"./components/error-boundary/error-boundary.component\";\nimport Spinner from \"./components/spinner/spinner.component\";\nimport { connect } from \"react-redux\";\n\nimport { ThemeProvider } from \"styled-components\";\nimport GlobalStyles from \"./Styles/GlobalStyles\";\nimport ToggleButton from \"./components/ToggleButton/ToggleButton\";\n\n/**\n * lazyloading enabled since we dont need all the js in one chunk we are at\n * specific route. This will improve loading times enormously\n */\nconst ContactDetails = lazy(() =>\n  import(\"./pages/ContactDetails/ContactDetails\")\n);\nconst AddressBook = lazy(() => import(\"./pages/AddressBook/AddressBook\"));\n\nfunction App({ globalMode }) {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Switch>\n          <ErrorBoundary>\n            <Suspense fallback={<Spinner />}>\n              {/**\n               * theme provider enable global access to access the theme props parameter which makes it easier\n               * to swtich to dark mode and vice versa\n               */}\n              <ThemeProvider theme={{ mode: globalMode }}>\n                <GlobalStyles />\n                <ToggleButton />\n                <div style={{ position: \"relative\", top: \"24em\" }}>\n                  {globalMode === \"dark\" ? (\n                    <h2>Switch to Light Mode</h2>\n                  ) : (\n                    <h2>Switch to Dark Mode</h2>\n                  )}\n                </div>\n                <Route exact path=\"/\" component={AddressBook} />\n                <Route path=\"/contact-detail\" component={ContactDetails} />\n              </ThemeProvider>\n            </Suspense>\n          </ErrorBoundary>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nconst mapStateToProps = ({ styleReducer: { mode } }) => ({\n  globalMode: mode,\n});\n\nexport default connect(mapStateToProps)(App);\n","import { combineReducers } from \"redux\";\nimport { actionTypes } from \"./types\";\n\nconst initialContactList = {\n  contactList: [],\n  error: null,\n  isPending: false,\n  page: 1,\n  searchField: \"\",\n};\nexport function contactListReducer(state = initialContactList, action) {\n  switch (action.type) {\n    case actionTypes.GET_CONTACTS_SUCCESS:\n      return {\n        ...state,\n        contactList: [...state.contactList, ...action.payload.results],\n        isPending: false,\n      };\n\n    case actionTypes.GET_CONTACTS_PENDING:\n      return {\n        ...state,\n        isPending: true,\n      };\n    case actionTypes.GET_CONTACTS_FAILED:\n      return {\n        ...state,\n        isPending: false,\n        error: action.payload,\n      };\n    case actionTypes.SEARCH_FIELD_CHANGE:\n      return {\n        ...state,\n        searchField: action.payload,\n      };\n    case actionTypes.UPDATE_PAGE_NUMBER:\n      if (action.payload < 11) {\n        return {\n          ...state,\n          page: action.payload,\n        };\n      } else {\n        return state;\n      }\n    default:\n      break;\n  }\n  return state;\n}\n\nconst initialPersonDetail = {\n  person: null,\n};\n\nfunction personDetailReducer(state = initialPersonDetail, action) {\n  switch (action.type) {\n    case actionTypes.UPDATE_PERSON_DETAIL:\n      return { ...state, person: action.payload };\n\n    default:\n      break;\n  }\n  return state;\n}\n\nconst initialStyle = {\n  mode: \"light\",\n};\n\nexport function styleReducer(state = initialStyle, action) {\n  switch (action.type) {\n    /**\n     * When its dark toggle to light and vice versa\n     */\n    case actionTypes.TOGGLE_DARK_MODE:\n      return state.mode === \"light\"\n        ? { ...state, mode: \"dark\" }\n        : { ...state, mode: \"light\" };\n\n    default:\n      break;\n  }\n  return state;\n}\n\nconst rootReducer = combineReducers({\n  contactListReducer,\n  personDetailReducer,\n  styleReducer,\n});\n\nexport default rootReducer;\n","import { createStore } from \"redux\";\nimport rootReducer from \"./root-reducer\";\nimport { applyMiddleware } from \"redux\";\nimport { createLogger } from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\n\nconst logger = createLogger();\n/**\n * we are creating global store and using the store in our root file to have\n * all components to access it\n *\n */\n\nconst middlewares = [thunkMiddleware];\n/**\n * we need not run logger in production mode since it can show the state to users.\n * To improve security of out application we should only run logger in development mode\n */\nif (process.env.NODE_ENV === \"development\") {\n  middlewares.push(logger);\n}\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./redux/store\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}