{"version":3,"sources":["components/table/contactTable.jsx"],"names":["connect","contactListReducer","isPending","contactList","page","searchField","mode","styleReducer","dispatch","updatePageNumber","updatePersonDetailView","person","history","useHistory","useState","shadow","setShadow","handleDetailView","push","observer","useRef","lastElementRef","useCallback","node","current","disconnect","IntersectionObserver","entries","isIntersecting","observe","filteredUsers","filter","name","first","last","gender","toLowerCase","includes","boxShadow","useEffect","className","length","map","index","style","key","onClick","data-label","component","scope","email","phone","ref"],"mappings":"qPA0JeA,uBAhBS,SAAC,GAAD,QACtBC,mBAAsBC,EADA,EACAA,UAAWC,EADX,EACWA,YAAaC,EADxB,EACwBA,KAAMC,EAD9B,EAC8BA,YAD9B,MAGjB,CACLH,YACAC,cACAC,OACAE,KAPsB,EAEtBC,aAAgBD,KAMhBD,kBAGyB,SAACG,GAAD,MAAe,CACxCC,iBAAkB,SAACL,GAAD,OAAUI,EAASC,YAAiBL,KACtDM,uBAAwB,SAACC,GAAD,OAAYH,EAASE,YAAuBC,QAGvDX,EAlJM,SAAC,GAQf,IAPLE,EAOI,EAPJA,UACAC,EAMI,EANJA,YACAC,EAKI,EALJA,KACAK,EAII,EAJJA,iBACAC,EAGI,EAHJA,uBACAJ,EAEI,EAFJA,KACAD,EACI,EADJA,YAEIO,EAAUC,cADV,EAEwBC,mBAC1B,4CAHE,mBAEGC,EAFH,KAEWC,EAFX,KAKEC,EAAmB,SAACN,GACxBD,EAAuBC,GACvBC,EAAQM,KAAK,mBAGTC,EAAWC,mBAIXC,EAAiBC,uBACrB,SAACC,GACKrB,IAIAiB,EAASK,SAASL,EAASK,QAAQC,aAIvCN,EAASK,QAAU,IAAIE,sBAAqB,SAACC,GACvCA,EAAQ,GAAGC,gBACbnB,EAAiBL,EAAO,MAGxBmB,GAIFJ,EAASK,QAAQK,QAAQN,MAG7B,CAACrB,EAAWE,EAAMK,IAKdqB,EAAgB3B,EAAY4B,QAAO,SAACpB,GAExC,OADqBA,EAAOqB,KAAKC,MAAQtB,EAAOqB,KAAKE,KAAOvB,EAAOwB,QAC7CC,cAAcC,SAAShC,EAAY+B,kBAGrDE,EAAY,CAChBA,UAAWvB,GAQb,OANAwB,qBAAU,WACavB,EAAR,SAATV,EAA2B,2CAEnB,wCAEX,CAACA,IAEF,yBAAKkC,UAAU,mBACZrC,EAAYsC,OAAS,EACpB,wBAAID,UAAU,oBACZ,wBAAIA,UAAU,gBACZ,yBAAKA,UAAU,aAAf,QACA,yBAAKA,UAAU,aAAf,UACA,yBAAKA,UAAU,aAAf,SACA,yBAAKA,UAAU,aAAf,YAGDV,EAAcY,KAAI,SAAC/B,EAAQgC,GAC1B,OAAIxC,EAAYsC,SAAWE,EAAQ,GAAMtC,EAyBrC,wBAAImC,UAAU,YAAYI,MAAON,EAAWO,IAAKF,GAC/C,yBACEG,QAAS,kBAAM7B,EAAiBN,IAChCoC,aAAW,OACXC,UAAU,KACVC,MAAM,MACNT,UAAU,uBAET7B,EAAOqB,KAAKC,MAAQ,IAAMtB,EAAOqB,KAAKE,KAAO,IAC9C,kBAAC,IAAD,CAAMF,KAAK,SAEb,yBAAKQ,UAAU,YAAYO,aAAW,UACnCpC,EAAOwB,QAEV,yBAAKK,UAAU,YAAYO,aAAW,SACnCpC,EAAOuC,OAEV,yBAAKV,UAAU,YAAYO,aAAW,SACnCpC,EAAOwC,QAzCZ,wBAAIX,UAAU,YAAYY,IAAK/B,EAAgBwB,IAAKF,GAClD,yBACEG,QAAS,kBAAM7B,EAAiBN,IAChCoC,aAAW,OACXC,UAAU,KACVC,MAAM,MACNT,UAAU,uBAET7B,EAAOqB,KAAKC,MAAQ,IAAMtB,EAAOqB,KAAKE,MAEzC,yBAAKM,UAAU,YAAYO,aAAW,UACnCpC,EAAOwB,QAEV,yBAAKK,UAAU,YAAYO,aAAW,SACnCpC,EAAOuC,OAEV,yBAAKV,UAAU,YAAYO,aAAW,SACnCpC,EAAOwC,YA+BlB,KACHjD,GAAaE,EAAO,GAAK,kBAAC,IAAD,MAAc","file":"static/js/7.2e7a5c0b.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef, useCallback } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport Spinner from \"../spinner/spinner.component\";\nimport \"./contactTable.scss\";\nimport { updatePageNumber, updatePersonDetailView } from \"../../redux/actions\";\nimport { Icon } from \"semantic-ui-react\";\n\nconst ContactTable = ({\n  isPending,\n  contactList,\n  page,\n  updatePageNumber,\n  updatePersonDetailView,\n  mode,\n  searchField,\n}) => {\n  let history = useHistory();\n  const [shadow, setShadow] = useState(\n    \"0px 0px 9px 0px rgba(255, 255, 255, 0.1)\"\n  );\n  const handleDetailView = (person) => {\n    updatePersonDetailView(person);\n    history.push(\"contact-detail\");\n  };\n\n  const observer = useRef();\n  /**\n   * lastElement is referenced here to fetch the data again in infinte scroll function\n   */\n  const lastElementRef = useCallback(\n    (node) => {\n      if (isPending) return;\n      /**\n       * here is we bascically disconnects from our previous node when lastelementref is changed\n       */\n      if (observer.current) observer.current.disconnect();\n      /**\n       * now we are referencing new intersecting node so that we set for next data by updating page number\n       */\n      observer.current = new IntersectionObserver((entries) => {\n        if (entries[0].isIntersecting) {\n          updatePageNumber(page + 1);\n        }\n      });\n      if (node) {\n        /**\n         * if there is a node we need to observe it when we scroll upto it we can fetch the data again\n         */\n        observer.current.observe(node);\n      }\n    },\n    [isPending, page, updatePageNumber]\n  );\n  /**\n   * Filter users based on search field data which includes first, last and gender\n   */\n  const filteredUsers = contactList.filter((person) => {\n    let searchIncludes = person.name.first + person.name.last + person.gender;\n    return searchIncludes.toLowerCase().includes(searchField.toLowerCase());\n  });\n\n  const boxShadow = {\n    boxShadow: shadow,\n  };\n  useEffect(() => {\n    if (mode === \"dark\") setShadow(\"0px 0px 9px 0px rgba(255, 255, 255, 0.1)\");\n    else {\n      setShadow(\"0px 0px 9px 0px rgba(0, 0, 0, 0.1)\");\n    }\n  }, [mode]);\n  return (\n    <div className=\"container-table\">\n      {contactList.length > 0 ? (\n        <ul className=\"responsive-table\">\n          <li className=\"table-header\">\n            <div className=\"col col-1\">Name</div>\n            <div className=\"col col-2\">Gender</div>\n            <div className=\"col col-3\">Email</div>\n            <div className=\"col col-4\">Contact</div>\n          </li>\n\n          {filteredUsers.map((person, index) => {\n            if (contactList.length === index + 1 && !searchField) {\n              return (\n                <li className=\"table-row\" ref={lastElementRef} key={index}>\n                  <div\n                    onClick={() => handleDetailView(person)}\n                    data-label=\"Name\"\n                    component=\"th\"\n                    scope=\"row\"\n                    className=\"clickable col col-1\"\n                  >\n                    {person.name.first + \" \" + person.name.last}\n                  </div>\n                  <div className=\"col col-2\" data-label=\"Gender\">\n                    {person.gender}\n                  </div>\n                  <div className=\"col col-3\" data-label=\"Email\">\n                    {person.email}\n                  </div>\n                  <div className=\"col col-4\" data-label=\"Phone\">\n                    {person.phone}\n                  </div>\n                </li>\n              );\n            } else {\n              return (\n                <li className=\"table-row\" style={boxShadow} key={index}>\n                  <div\n                    onClick={() => handleDetailView(person)}\n                    data-label=\"Name\"\n                    component=\"th\"\n                    scope=\"row\"\n                    className=\"clickable col col-1\"\n                  >\n                    {person.name.first + \" \" + person.name.last + \" \"}\n                    <Icon name=\"eye\" />\n                  </div>\n                  <div className=\"col col-2\" data-label=\"Gender\">\n                    {person.gender}\n                  </div>\n                  <div className=\"col col-3\" data-label=\"Email\">\n                    {person.email}\n                  </div>\n                  <div className=\"col col-4\" data-label=\"Phone\">\n                    {person.phone}\n                  </div>\n                </li>\n              );\n            }\n          })}\n        </ul>\n      ) : null}\n      {isPending && page < 11 ? <Spinner /> : null}\n    </div>\n  );\n};\nconst mapStateToProps = ({\n  contactListReducer: { isPending, contactList, page, searchField },\n  styleReducer: { mode },\n}) => ({\n  isPending,\n  contactList,\n  page,\n  mode,\n  searchField,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  updatePageNumber: (page) => dispatch(updatePageNumber(page)),\n  updatePersonDetailView: (person) => dispatch(updatePersonDetailView(person)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactTable);\n"],"sourceRoot":""}